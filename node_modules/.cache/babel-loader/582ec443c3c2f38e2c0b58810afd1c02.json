{"ast":null,"code":"var _jsxFileName = \"/Users/euno/Desktop/Nomad-Coder/react-03/src/routes/Home.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport Movie from '../components/Movie.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Home() {\n  _s();\n\n  const [loading, setLoading] = useState(true);\n  const [movies, setMovies] = useState([]); //api로 정보를 불러온 후 json으로 변경, json 파일을 state로 사용한다\n  //arrow function, async, await을 사용, 코드 줄여서 쓰는 경우, 왜 사용할까?\n\n  const getMovies = async () => {\n    const json = await (await fetch('https://yts.mx/api/v2/list_movies.json?minimum_rating=8.5&sort_by=year')).json();\n    setMovies(json.data.movies);\n    setLoading(false);\n  };\n  /* arrow function, async, await을 사용\n  const getMovies = async () => {\n    const response = await fetch('https://yts.mx/api/v2/list_movies.json?minimum_rating=8.5&sort_by=year');\n    const json = await response.json();\n    setMovies(json.data.movies);\n    setLoading(false);\n  };\n  */\n\n  /* then 사용\n  const getMovies = () => {\n    fetch('https://yts.mx/api/v2/list_movies.json?minimum_rating=8.0&sort_by=year')\n    .then((response) => response.json())\n    .then((json) => {\n      setMovies(json.data.movies);\n      setLoading(false);\n    });\n  };\n  */\n\n\n  useEffect(() => {\n    getMovies();\n  }, []);\n  console.log(movies);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: loading ? /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"loading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: movies.map(item => /*#__PURE__*/_jsxDEV(Movie, {\n        cover: item.medium_cover_image,\n        id: item.id,\n        title: item.title,\n        rating: item.rating,\n        genres: item.genres,\n        summary: item.summary\n      }, item.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Home, \"1CKmgsbuFjewbGnYkjmhEBs6qQ4=\");\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/Users/euno/Desktop/Nomad-Coder/react-03/src/routes/Home.js"],"names":["useEffect","useState","Movie","Home","loading","setLoading","movies","setMovies","getMovies","json","fetch","data","console","log","map","item","medium_cover_image","id","title","rating","genres","summary"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,KAAP,MAAkB,wBAAlB;;;AAEA,SAASC,IAAT,GAAgB;AAAA;;AACZ,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBJ,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAACK,MAAD,EAASC,SAAT,IAAsBN,QAAQ,CAAC,EAAD,CAApC,CAFY,CAIZ;AACA;;AACA,QAAMO,SAAS,GAAG,YAAY;AAC1B,UAAMC,IAAI,GAAG,MAAM,CACf,MAAMC,KAAK,CAAC,wEAAD,CADI,EAEdD,IAFc,EAAnB;AAGAF,IAAAA,SAAS,CAACE,IAAI,CAACE,IAAL,CAAUL,MAAX,CAAT;AACAD,IAAAA,UAAU,CAAC,KAAD,CAAV;AACH,GAND;AAQA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGIL,EAAAA,SAAS,CAAC,MAAM;AACZQ,IAAAA,SAAS;AACZ,GAFQ,EAEN,EAFM,CAAT;AAIAI,EAAAA,OAAO,CAACC,GAAR,CAAYP,MAAZ;AAEA,sBACI;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,cACKF,OAAO,gBACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADI,gBAEJ;AAAA,gBACKE,MAAM,CAACQ,GAAP,CAAYC,IAAD,iBACR,QAAC,KAAD;AAEI,QAAA,KAAK,EAAEA,IAAI,CAACC,kBAFhB;AAGI,QAAA,EAAE,EAAED,IAAI,CAACE,EAHb;AAII,QAAA,KAAK,EAAEF,IAAI,CAACG,KAJhB;AAKI,QAAA,MAAM,EAAEH,IAAI,CAACI,MALjB;AAMI,QAAA,MAAM,EAAEJ,IAAI,CAACK,MANjB;AAOI,QAAA,OAAO,EAAEL,IAAI,CAACM;AAPlB,SACSN,IAAI,CAACE,EADd;AAAA;AAAA;AAAA;AAAA,cADH;AADL;AAAA;AAAA;AAAA;AAAA;AAHR;AAAA;AAAA;AAAA;AAAA,UADJ;AAkBH;;GA3DQd,I;;KAAAA,I;AA6DT,eAAeA,IAAf","sourcesContent":["import { useEffect, useState } from 'react';\nimport Movie from '../components/Movie.js';\n\nfunction Home() {\n    const [loading, setLoading] = useState(true);\n    const [movies, setMovies] = useState([]);\n\n    //api로 정보를 불러온 후 json으로 변경, json 파일을 state로 사용한다\n    //arrow function, async, await을 사용, 코드 줄여서 쓰는 경우, 왜 사용할까?\n    const getMovies = async () => {\n        const json = await (\n            await fetch('https://yts.mx/api/v2/list_movies.json?minimum_rating=8.5&sort_by=year'))\n            .json();\n        setMovies(json.data.movies);\n        setLoading(false);\n    };\n\n    /* arrow function, async, await을 사용\n    const getMovies = async () => {\n      const response = await fetch('https://yts.mx/api/v2/list_movies.json?minimum_rating=8.5&sort_by=year');\n      const json = await response.json();\n      setMovies(json.data.movies);\n      setLoading(false);\n    };\n    */\n\n    /* then 사용\n    const getMovies = () => {\n      fetch('https://yts.mx/api/v2/list_movies.json?minimum_rating=8.0&sort_by=year')\n      .then((response) => response.json())\n      .then((json) => {\n        setMovies(json.data.movies);\n        setLoading(false);\n      });\n    };\n    */\n\n\n    useEffect(() => {\n        getMovies();\n    }, []);\n\n    console.log(movies);\n\n    return (\n        <div className=\"App\">\n            {loading ?\n                <h1>loading</h1> :\n                <div>\n                    {movies.map((item) =>\n                        <Movie\n                            key={item.id}\n                            cover={item.medium_cover_image}\n                            id={item.id}\n                            title={item.title}\n                            rating={item.rating}\n                            genres={item.genres}\n                            summary={item.summary} />)}\n                </div>\n            }\n        </div >\n    );\n}\n\nexport default Home;"]},"metadata":{},"sourceType":"module"}